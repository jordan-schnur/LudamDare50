[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="Brown_rock_01_normal_xtm.png" type="Texture"]

[ext_resource id=2 path="Brown_rock_01_diffuse_xtm.png" type="Texture"]

[ext_resource id=3 path="Brown_rock_01_roughness_xtm.png" type="Texture"]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0: hint_normal;
uniform sampler2D texture_1;
uniform sampler2D texture_2: hint_albedo;


void dir_space_convert_view_to_world(inout vec3 dir, in mat4 inv_view_mat) {
    dir = normalize(inv_view_mat * vec4(dir, 0.0)).xyz;
}


void dir_space_convert_world_to_view(inout vec3 dir, in mat4 view_mat) {
    dir = normalize(view_mat * vec4(dir, 0.0)).xyz;
}


void euler_angle_XYZ_to_mat4(in vec3 rot, out mat4 rot_mat) {
    mat3 rx = mat3(vec3(1, 0, 0),
                   vec3(0, cos(rot.x), sin(rot.x)),
                   vec3(0, -sin(rot.x), cos(rot.x)));
    mat3 ry = mat3(vec3(cos(rot.y), 0, -sin(rot.y)),
                   vec3(0, 1, 0),
                   vec3(sin(rot.y), 0, cos(rot.y)));
    mat3 rz = mat3(vec3(cos(rot.z), sin(rot.z), 0),
                   vec3(-sin(rot.z), cos(rot.z), 0),
                   vec3(0, 0, 1));
    rot_mat = mat4(rz * ry * rx);
}


void location_to_mat4(in vec3 loc, out mat4 loc_mat) {
    loc_mat = mat4(vec4(1.0, 0.0, 0.0, 0),
                   vec4(0.0, 1.0, 0.0, 0),
                   vec4(0.0, 0.0, 1.0, 0),
                   vec4(loc, 1.0));
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_normal_map_tangent(float strength, vec4 color, vec3 normal,
        vec3 tangent, vec3 binormal, out vec3 out_normal) {
    vec3 signed_color = vec3(2.0, -2.0, -2.0) * (color.xyz - vec3(0.5));
    vec3 tex_normal = signed_color.x * tangent +
                      signed_color.y * binormal +
                      signed_color.z * normal;
    out_normal = strength * tex_normal + (1.0 - strength) * normal;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}


void scale_to_mat4(in vec3 scale, out mat4 scale_mat) {
    scale_mat = mat4(vec4(scale.x, 0.0, 0.0, 0.0),
                     vec4(0.0, scale.y, 0.0, 0.0),
                     vec4(0.0, 0.0, scale.z, 0.0),
                     vec4(0.0, 0.0, 0.0, 1.0));
}


void space_convert_yup_to_zup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, -1, 0)) * dir;
}


void space_convert_zup_to_yup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, -1), vec3(0, 1, 0)) * dir;
}

void vertex () {
}

void fragment () {
	mat4 INV_VIEW_MAT = inverse(INV_CAMERA_MATRIX);
	
	// node: 'Extreme PBR Coordinate'
	// type: 'ShaderNodeTexCoord'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_uv;
	
	node0_out0_uv = vec3(UV, 0.0);
	
	
	// node: 'Extreme PBR Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_uv;
	vec3 node1_in1_location = vec3(0.0, 0.0, 0.0);
	vec3 node1_in2_rotation = vec3(0.0, 0.0, 0.0);
	vec3 node1_in3_scale = vec3(1.0, 1.0, 1.0);
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	mat4 node1_var0_location;
	location_to_mat4(node1_in1_location, node1_var0_location);
	mat4 node1_var1_rotation;
	euler_angle_XYZ_to_mat4(node1_in2_rotation, node1_var1_rotation);
	mat4 node1_var2_scale;
	scale_to_mat4(node1_in3_scale, node1_var2_scale);
	mat4 node1_var3_xform_mat = node1_var0_location * node1_var1_rotation *
		node1_var2_scale;
	node1_out0_vector = (node1_var3_xform_mat * vec4(node1_in0_vector, 1.0)).xyz;
	
	
	// node: 'Normal XTM PBR'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Normal Map'
	// type: 'ShaderNodeNormalMap'
	// input sockets handling
	float node3_in0_strength = float(1.0);
	vec4 node3_in1_color = node2_out0_color;
	// output sockets definitions
	vec3 node3_out0_normal;
	
	node_normal_map_tangent(node3_in0_strength, node3_in1_color, NORMAL, TANGENT,
		BINORMAL, node3_out0_normal);
	dir_space_convert_view_to_world(node3_out0_normal, INV_VIEW_MAT);
	space_convert_yup_to_zup(node3_out0_normal);
	
	
	// node: 'Roughness XTM PBR'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node4_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node4_out0_color;
	float node4_out1_alpha;
	
	node_tex_image(node4_in0_vector, texture_1, node4_out0_color, node4_out1_alpha);
	
	
	// node: 'Diffuse XTM PBR'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node5_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node5_out0_color;
	float node5_out1_alpha;
	
	node_tex_image(node5_in0_vector, texture_2, node5_out0_color, node5_out1_alpha);
	
	
	// node: 'Extreme PBR BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node6_in0_basecolor = node5_out0_color;
	float node6_in1_subsurface = float(0.0);
	vec3 node6_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node6_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node6_in4_subsurfaceior = float(0.0);
	float node6_in5_subsurfaceanisotropy = float(0.019999999552965164);
	float node6_in6_metallic = float(0.0);
	float node6_in7_specular = float(0.8999999761581421);
	float node6_in8_speculartint = float(0.0);
	float node6_in9_roughness = dot(node4_out0_color.rgb, vec3(0.2126, 0.7152,
		0.0722));
	float node6_in10_anisotropic = float(0.0);
	float node6_in11_anisotropicrotation = float(0.5);
	float node6_in12_sheen = float(0.0);
	float node6_in13_sheentint = float(0.029999999329447746);
	float node6_in14_clearcoat = float(0.0);
	float node6_in15_clearcoatroughness = float(0.029999999329447746);
	float node6_in16_ior = float(1.4500000476837158);
	float node6_in17_transmission = float(0.0);
	float node6_in18_transmissionroughness = float(0.0);
	vec4 node6_in19_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node6_in20_emissionstrength = float(1.0);
	float node6_in21_alpha = float(1.0);
	vec3 node6_in22_normal = node3_out0_normal;
	vec3 node6_in23_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node6_in24_tangent = TANGENT;
	// output sockets definitions
	vec3 node6_bsdf_out0_albedo;
	float node6_bsdf_out1_sss_strength;
	float node6_bsdf_out3_specular;
	float node6_bsdf_out2_metallic;
	float node6_bsdf_out4_roughness;
	float node6_bsdf_out5_clearcoat;
	float node6_bsdf_out6_clearcoat_gloss;
	float node6_bsdf_out7_anisotropy;
	float node6_bsdf_out8_transmission;
	float node6_bsdf_out9_ior;
	
	node_bsdf_principled(node6_in0_basecolor, node6_in1_subsurface,
		node6_in3_subsurfacecolor, node6_in6_metallic, node6_in7_specular,
		node6_in9_roughness, node6_in14_clearcoat, node6_in15_clearcoatroughness,
		node6_in10_anisotropic, node6_in17_transmission, node6_in16_ior,
		node6_bsdf_out0_albedo, node6_bsdf_out1_sss_strength, node6_bsdf_out2_metallic,
		node6_bsdf_out3_specular, node6_bsdf_out4_roughness, node6_bsdf_out5_clearcoat,
		node6_bsdf_out6_clearcoat_gloss, node6_bsdf_out7_anisotropy,
		node6_bsdf_out8_transmission, node6_bsdf_out9_ior);
	space_convert_zup_to_yup(node6_in22_normal);
	dir_space_convert_world_to_view(node6_in22_normal, INV_CAMERA_MATRIX);
	
	
	ALBEDO = node6_bsdf_out0_albedo;
	SSS_STRENGTH = node6_bsdf_out1_sss_strength;
	SPECULAR = node6_bsdf_out3_specular;
	METALLIC = node6_bsdf_out2_metallic;
	ROUGHNESS = node6_bsdf_out4_roughness;
	CLEARCOAT = node6_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node6_bsdf_out6_clearcoat_gloss;
	NORMAL = node6_in22_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node6_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node6_in24_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node6_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)
shader_param/texture_0 = ExtResource(1)
shader_param/texture_1 = ExtResource(3)
shader_param/texture_2 = ExtResource(2)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "rock001"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.417505, 0.0103387, -0.2171, 0.450655, -0.113999, -0.0925167, 0.476646, -0.170703, -0.167348, 0.423605, -0.110706, -0.266055, 0.439776, -0.254172, -0.00300147, 0.469366, -0.293223, -0.12657, 0.476646, -0.170703, -0.167348, 0.450655, -0.113999, -0.0925167, 0.393902, -0.2446, -0.24981, 0.423605, -0.110706, -0.266055, 0.241323, 0.23824, -0.215465, 0.322746, 0.0495116, -0.120573, 0.302388, 0.0987992, -0.330286, 0.364118, -0.08783, -0.00792374, 0.315987, -0.0507727, -0.361815, 0.349799, -0.336541, 0.156426, 0.381676, -0.409517, 0.0705723, 0.363557, -0.218829, 0.0888884, 0.380549, -0.44292, -0.0806542, 0.364118, -0.08783, -0.00792374, 0.258304, -0.290763, -0.293036, 0.291147, -0.189487, -0.331834, 0.318588, -0.371822, -0.221406, 0.315987, -0.0507727, -0.361815, 0.21837, 0.0125784, 0.00480469, 0.105945, -0.067055, 0.146559, 0.174812, -0.125775, 0.180882, 0.261471, -0.106177, 0.0895418, 0.00998153, -0.168772, 0.324517, 0.139439, -0.229248, 0.290105, 0.174812, -0.125775, 0.180882, 0.105945, -0.067055, 0.146559, 0.262672, -0.228519, 0.192751, 0.261471, -0.106177, 0.0895418, 0.241323, 0.23824, -0.215465, 0.139129, 0.13602, -0.0267494, 0.322746, 0.0495116, -0.120573, 0.0313391, 0.031881, 0.14825, 0.364118, -0.08783, -0.00792374, -0.250678, -0.245943, 0.307878, -0.112876, -0.366763, 0.361733, -0.104022, -0.101142, 0.263645, 0.0764272, -0.414071, 0.326119, 0.0313391, 0.031881, 0.14825, 0.349799, -0.336541, 0.156426, 0.363557, -0.218829, 0.0888884, 0.242022, -0.385338, 0.235022, 0.364118, -0.08783, -0.00792374, 0.0369325, 0.234424, 0.0361074, -0.0972591, 0.272848, 0.112235, -0.131669, 0.171515, 0.180601, -0.0642271, 0.108879, 0.154205, -0.234541, 0.251577, 0.175967, -0.242383, 0.120882, 0.235884, -0.131669, 0.171515, 0.180601, -0.0972591, 0.272848, 0.112235, -0.191842, 0.000867304, 0.257718, -0.0642271, 0.108879, 0.154205, 0.241323, 0.23824, -0.215465, 0.0966884, 0.373552, -0.0892836, 0.139129, 0.13602, -0.0267494, -0.0786048, 0.38584, 0.010762, 0.0313391, 0.031881, 0.14825, -0.322172, 0.306852, 0.113093, -0.362199, 0.210486, 0.183138, -0.22251, 0.358038, 0.0842061, -0.367608, 0.056761, 0.225302, -0.0786048, 0.38584, 0.010762, -0.250678, -0.245943, 0.307878, -0.104022, -0.101142, 0.263645, -0.33097, -0.098266, 0.256277, 0.0313391, 0.031881, 0.14825, 0.0278414, 0.457927, -0.22014, -0.11475, 0.455903, -0.280523, -0.176023, 0.484098, -0.167376, -0.113277, 0.473288, -0.0857493, -0.244901, 0.389541, -0.244793, -0.28067, 0.435117, -0.12281, -0.176023, 0.484098, -0.167376, -0.11475, 0.455903, -0.280523, -0.252024, 0.419479, -0.0119013, -0.113277, 0.473288, -0.0857493, 0.241323, 0.23824, -0.215465, 0.123455, 0.334398, -0.353633, 0.0966884, 0.373552, -0.0892836, -0.0508044, 0.351594, -0.407438, -0.0786048, 0.38584, 0.010762, -0.289142, 0.255436, -0.287977, -0.343669, 0.296934, -0.199438, -0.205943, 0.305638, -0.356633, -0.374811, 0.323632, -0.0738548, -0.0508044, 0.351594, -0.407438, -0.322172, 0.306852, 0.113093, -0.22251, 0.358038, 0.0842061, -0.356629, 0.319554, 0.037048, -0.0786048, 0.38584, 0.010762, 0.150871, 0.149474, -0.399957, 0.16863, -0.0178868, -0.426709, -0.0046293, -0.0058627, -0.450201, -0.0175034, 0.173897, -0.453047, 0.160861, -0.178961, -0.394105, -0.00105418, -0.177621, -0.413106, -0.184391, -0.00248299, -0.428479, -0.183651, 0.162377, -0.402471, -0.173089, -0.173355, -0.401254, 0.241323, 0.23824, -0.215465, 0.302388, 0.0987992, -0.330286, 0.123455, 0.334398, -0.353633, 0.315987, -0.0507727, -0.361815, 0.291147, -0.189487, -0.331834, 0.258304, -0.290763, -0.293036, 0.154721, -0.322339, -0.327405, -0.00276867, -0.332601, -0.33431, -0.155365, -0.300123, -0.30038, -0.265908, -0.266577, -0.266511, -0.309989, -0.159389, -0.309046, -0.322881, -0.000754537, -0.321775, -0.31465, 0.151813, -0.313605, -0.205943, 0.305638, -0.356633, -0.289142, 0.255436, -0.287977, -0.0508044, 0.351594, -0.407438, 0.173946, -0.45025, -0.211824, 0.207871, -0.54845, -0.0489346, -0.000389624, -0.517854, -0.0234555, -0.0046036, -0.441125, -0.194957, 0.227165, -0.524491, 0.133291, 0.0185025, -0.563511, 0.183049, -0.192461, -0.462049, -0.0130998, -0.167842, -0.387508, -0.171437, -0.198022, -0.501124, 0.196152, 0.258304, -0.290763, -0.293036, 0.318588, -0.371822, -0.221406, 0.154721, -0.322339, -0.327405, 0.380549, -0.44292, -0.0806542, 0.381676, -0.409517, 0.0705723, 0.349799, -0.336541, 0.156426, 0.242022, -0.385338, 0.235022, 0.0764272, -0.414071, 0.326119, -0.112876, -0.366763, 0.361733, -0.250678, -0.245943, 0.307878, -0.356684, -0.351593, 0.180858, -0.369148, -0.366244, -0.00888296, -0.314141, -0.313294, -0.165634, -0.155365, -0.300123, -0.30038, -0.265908, -0.266577, -0.266511, -0.00276867, -0.332601, -0.33431, -0.386654, -0.165109, -0.169098, -0.440075, -0.178598, -0.0120626, -0.437614, 0.00490943, -0.0199124, -0.422023, -0.000310326, -0.183949, -0.43528, -0.164654, 0.159262, -0.454809, 0.019709, 0.132615, -0.427737, 0.17478, -0.039921, -0.394573, 0.16156, -0.182831, -0.431598, 0.187339, 0.0906717, -0.265908, -0.266577, -0.266511, -0.314141, -0.313294, -0.165634, -0.309989, -0.159389, -0.309046, -0.369148, -0.366244, -0.00888296, -0.356684, -0.351593, 0.180858, -0.250678, -0.245943, 0.307878, -0.33097, -0.098266, 0.256277, -0.367608, 0.056761, 0.225302, -0.362199, 0.210486, 0.183138, -0.322172, 0.306852, 0.113093, -0.356629, 0.319554, 0.037048, -0.374811, 0.323632, -0.0738548, -0.343669, 0.296934, -0.199438, -0.31465, 0.151813, -0.313605, -0.289142, 0.255436, -0.287977, -0.322881, -0.000754537, -0.321775),
		Vector3Array(0.872879, 0.475471, -0.109586, 0.886112, 0.354093, 0.29904, 0.978687, 0.00601437, -0.205272, 0.814971, 0.0157985, -0.579286, 0.916896, 0.0172396, 0.398753, 0.931205, -0.316991, -0.179926, 0.978687, 0.00601437, -0.205272, 0.886112, 0.354093, 0.29904, 0.614811, -0.365161, -0.699046, 0.814971, 0.0157985, -0.579286, 0.801062, 0.594544, 0.0694066, 0.663746, 0.610283, 0.432429, 0.726322, 0.42647, -0.539054, 0.625746, 0.530145, 0.572178, 0.563269, 0.00973864, -0.826216, 0.731566, -0.0679741, 0.678374, 0.800072, -0.469197, 0.373816, 0.716915, 0.304497, 0.627147, 0.696198, -0.689593, -0.199423, 0.625746, 0.530145, 0.572178, 0.371335, -0.468507, -0.80163, 0.437713, -0.321111, -0.839818, 0.45557, -0.590891, -0.665811, 0.563269, 0.00973864, -0.826216, 0.51755, 0.575527, 0.633175, 0.419228, 0.606911, 0.675208, 0.452449, 0.614179, 0.646586, 0.497336, 0.589976, 0.63607, 0.186918, 0.413901, 0.890925, 0.443952, 0.310051, 0.840699, 0.452449, 0.614179, 0.646586, 0.419228, 0.606911, 0.675208, 0.575797, 0.345213, 0.741138, 0.497336, 0.589976, 0.63607, 0.801062, 0.594544, 0.0694066, 0.629603, 0.426086, 0.649654, 0.663746, 0.610283, 0.432429, 0.470676, 0.465486, 0.749525, 0.625746, 0.530145, 0.572178, -0.415369, -0.0380834, 0.908855, -0.18737, -0.251072, 0.949661, 0.115248, 0.397901, 0.910161, 0.261541, -0.377547, 0.888287, 0.470676, 0.465486, 0.749525, 0.731566, -0.0679741, 0.678374, 0.716915, 0.304497, 0.627147, 0.569722, -0.265408, 0.777802, 0.625746, 0.530145, 0.572178, 0.594207, 0.386604, 0.705305, 0.40572, 0.47774, 0.779202, 0.408915, 0.336199, 0.848386, 0.483149, 0.33443, 0.80915, 0.0643766, 0.526343, 0.847832, 0.0785482, 0.292149, 0.953142, 0.408915, 0.336199, 0.848386, 0.40572, 0.47774, 0.779202, 0.132915, 0.248186, 0.95955, 0.483149, 0.33443, 0.80915, 0.801062, 0.594544, 0.0694066, 0.649726, 0.625471, 0.432021, 0.629603, 0.426086, 0.649654, 0.321228, 0.69864, 0.639308, 0.470676, 0.465486, 0.749525, -0.420838, 0.687779, 0.591485, -0.496353, 0.453838, 0.740044, -0.0348309, 0.742986, 0.668399, -0.493648, 0.177026, 0.851454, 0.321228, 0.69864, 0.639308, -0.415369, -0.0380834, 0.908855, 0.115248, 0.397901, 0.910161, -0.43231, 0.045691, 0.900567, 0.470676, 0.465486, 0.749525, 0.419086, 0.902603, -0.0983597, -0.143665, 0.862877, -0.484566, -0.259699, 0.956731, -0.131234, 0.103389, 0.943036, 0.316218, -0.608159, 0.595427, -0.524984, -0.595768, 0.799276, -0.078855, -0.259699, 0.956731, -0.131234, -0.143665, 0.862877, -0.484566, -0.320049, 0.853072, 0.412114, 0.103389, 0.943036, 0.316218, 0.801062, 0.594544, 0.0694066, 0.547664, 0.614135, -0.568245, 0.649726, 0.625471, 0.432021, -0.0317732, 0.536904, -0.843045, 0.321228, 0.69864, 0.639308, -0.707517, 0.313329, -0.633439, -0.808444, 0.397347, -0.434204, -0.518161, 0.387034, -0.762702, -0.847195, 0.525034, -0.0812345, -0.0317732, 0.536904, -0.843045, -0.420838, 0.687779, 0.591485, -0.0348309, 0.742986, 0.668399, -0.706497, 0.647254, 0.286225, 0.321228, 0.69864, 0.639308, 0.448019, 0.278949, -0.849392, 0.303009, -0.0242474, -0.952679, 0.0158763, -0.0592198, -0.998119, 0.0170839, 0.171698, -0.985002, 0.239552, -0.322601, -0.91572, -0.0178609, -0.347359, -0.937562, -0.379513, -0.0428379, -0.924194, -0.433624, 0.149747, -0.888564, -0.337976, -0.360079, -0.869549, 0.801062, 0.594544, 0.0694066, 0.726322, 0.42647, -0.539054, 0.547664, 0.614135, -0.568245, 0.563269, 0.00973864, -0.826216, 0.437713, -0.321111, -0.839818, 0.371335, -0.468507, -0.80163, 0.185888, -0.555635, -0.81038, -0.106895, -0.63677, -0.763609, -0.333889, -0.65921, -0.673765, -0.551469, -0.590821, -0.588909, -0.685682, -0.31945, -0.654058, -0.72477, -0.0240782, -0.68857, -0.715524, 0.175791, -0.676108, -0.518161, 0.387034, -0.762702, -0.707517, 0.313329, -0.633439, -0.0317732, 0.536904, -0.843045, 0.13183, -0.775502, -0.617429, 0.225353, -0.944899, -0.237449, -0.183277, -0.943279, -0.276829, -0.196138, -0.823315, -0.532618, 0.413147, -0.83932, 0.353342, -0.0167665, -0.945207, 0.326041, -0.412736, -0.870739, -0.267325, -0.36057, -0.795349, -0.487246, -0.441172, -0.830959, 0.338931, 0.371335, -0.468507, -0.80163, 0.45557, -0.590891, -0.665811, 0.185888, -0.555635, -0.81038, 0.696198, -0.689593, -0.199423, 0.800072, -0.469197, 0.373816, 0.731566, -0.0679741, 0.678374, 0.569722, -0.265408, 0.777802, 0.261541, -0.377547, 0.888287, -0.18737, -0.251072, 0.949661, -0.415369, -0.0380834, 0.908855, -0.765098, -0.508422, 0.395135, -0.751867, -0.629811, -0.195023, -0.638224, -0.610053, -0.469581, -0.333889, -0.65921, -0.673765, -0.551469, -0.590821, -0.588909, -0.106895, -0.63677, -0.763609, -0.874735, -0.269494, -0.402754, -0.96277, -0.233379, -0.136412, -0.992545, 0.00543827, -0.121761, -0.928235, -0.0167325, -0.371617, -0.902935, -0.163939, 0.397281, -0.942584, 0.0628581, 0.327999, -0.96675, 0.230101, -0.111573, -0.903723, 0.195452, -0.380898, -0.909902, 0.328429, 0.253401, -0.551469, -0.590821, -0.588909, -0.638224, -0.610053, -0.469581, -0.685682, -0.31945, -0.654058, -0.751867, -0.629811, -0.195023, -0.765098, -0.508422, 0.395135, -0.415369, -0.0380834, 0.908855, -0.43231, 0.045691, 0.900567, -0.493648, 0.177026, 0.851454, -0.496353, 0.453838, 0.740044, -0.420838, 0.687779, 0.591485, -0.706497, 0.647254, 0.286225, -0.847195, 0.525034, -0.0812345, -0.808444, 0.397347, -0.434204, -0.715524, 0.175791, -0.676108, -0.707517, 0.313329, -0.633439, -0.72477, -0.0240782, -0.68857),
		FloatArray(0.445854, -0.685977, 0.575021, 1.0, 0.131803, -0.8111, 0.569864, 1.0, 0.135585, -0.769666, 0.623883, 1.0, 0.409131, -0.723629, 0.555853, 1.0, -0.222658, -0.807065, 0.546873, 1.0, -0.162836, -0.803423, 0.572709, 1.0, 0.129632, -0.793344, 0.594811, 1.0, 0.0796243, -0.75193, 0.654417, 1.0, 0.15114, -0.815376, 0.558856, 1.0, 0.405571, -0.729562, 0.550682, 1.0, 0.510795, -0.73942, 0.438573, 1.0, 0.365784, -0.769146, 0.524038, 1.0, 0.667433, -0.625026, 0.404815, 1.0, 0.158692, -0.804718, 0.572053, 1.0, 0.654554, -0.615509, 0.438984, 1.0, -0.415088, -0.83375, 0.364092, 1.0, -0.597734, -0.676434, 0.430291, 1.0, -0.0992412, -0.84584, 0.524124, 1.0, -0.476352, -0.651627, 0.590314, 1.0, 0.0521004, -0.760305, 0.647473, 1.0, 0.115486, -0.833353, 0.540543, 1.0, 0.334926, -0.808594, 0.483736, 1.0, -0.0939118, -0.775662, 0.624123, 1.0, 0.569846, -0.728664, 0.379901, 1.0, -0.501205, -0.395842, 0.769482, 1.0, -0.511472, -0.456581, 0.727964, 1.0, -0.462777, -0.458078, 0.758948, 1.0, -0.476983, -0.426469, 0.768512, 1.0, -0.611079, -0.661107, 0.435338, 1.0, -0.538114, -0.65795, 0.526817, 1.0, -0.469098, -0.45272, 0.758282, 1.0, -0.508444, -0.459199, 0.728437, 1.0, -0.486893, -0.583436, 0.650029, 1.0, -0.482344, -0.421373, 0.767977, 1.0, 0.00790602, -0.126451, 0.991941, 1.0, -0.489209, -0.432177, 0.75756, 1.0, -0.358512, -0.247817, 0.900031, 1.0, -0.554745, -0.504458, 0.66165, 1.0, -0.459059, -0.342764, 0.819621, 1.0, -0.52537, -0.805597, -0.273863, 1.0, -0.60304, -0.733752, -0.312971, 1.0, -0.653406, -0.659767, 0.371172, 1.0, -0.748275, -0.660627, -0.0604678, 1.0, -0.534856, -0.52509, 0.661974, 1.0, -0.545318, -0.655542, 0.522391, 1.0, -0.434473, -0.50838, 0.743494, 1.0, -0.696646, -0.65806, 0.285728, 1.0, -0.425743, -0.382514, 0.820016, 1.0, -0.804257, 0.275346, 0.526645, 1.0, -0.902991, 0.07761, 0.422592, 1.0, -0.907138, 0.0484469, 0.418034, 1.0, -0.873237, 0.117101, 0.473016, 1.0, -0.97086, -0.163494, 0.175217, 1.0, -0.996303, -0.0103721, 0.0852843, 1.0, -0.904751, 0.0279009, 0.425026, 1.0, -0.872045, -0.0529873, 0.48655, 1.0, -0.991095, 0.0410916, 0.126656, 1.0, -0.873725, 0.124727, 0.470156, 1.0, -0.528377, 0.647853, 0.54873, 1.0, -0.73761, 0.381308, 0.557258, 1.0, -0.770889, 0.446576, 0.454202, 1.0, -0.90106, 0.0177692, 0.43333, 1.0, -0.882032, 0.227053, 0.412877, 1.0, -0.859515, -0.510809, -0.0175705, 1.0, -0.866453, -0.311804, -0.38992, 1.0, -0.905173, -0.306941, 0.294023, 1.0, -0.869234, -0.0697529, -0.489455, 1.0, -0.846691, -0.0905022, 0.524332, 1.0, -0.909585, 0.0296176, -0.414461, 1.0, -0.992827, 0.0167916, 0.118374, 1.0, -0.901397, 0.00501991, -0.432964, 1.0, -0.876515, 0.149513, 0.457567, 1.0, -0.822869, 0.331795, -0.461301, 1.0, -0.962747, -0.235207, -0.133401, 1.0, -0.934932, -0.28312, -0.213881, 1.0, -0.912096, 0.216698, -0.348028, 1.0, -0.770031, -0.603178, 0.207916, 1.0, -0.797839, -0.600243, -0.0562247, 1.0, -0.959987, -0.270517, -0.0724204, 1.0, -0.988988, -0.142775, 0.0389737, 1.0, -0.934442, -0.212539, -0.285737, 1.0, -0.936901, 0.199079, -0.287374, 1.0, -0.401555, 0.619752, -0.674285, 1.0, -0.828469, 0.303015, -0.470978, 1.0, -0.366242, 0.755578, -0.54311, 1.0, -0.994771, -0.0988957, -0.0254915, 1.0, -0.641538, 0.65712, -0.395756, 1.0, -0.663087, -0.604331, 0.441701, 1.0, -0.516049, -0.833297, 0.198267, 1.0, -0.839687, -0.399726, 0.367622, 1.0, -0.521519, -0.851026, -0.0614213, 1.0, -0.996845, -0.0784067, -0.0123645, 1.0, -0.904755, -0.271032, -0.328572, 1.0, -0.971591, 0.131481, -0.196784, 1.0, -0.706046, -0.616844, -0.347854, 1.0, -0.786726, 0.572654, -0.2305, 1.0, 0.149936, -0.960065, -0.23621, 1.0, 0.031186, -0.998889, 0.0353425, 1.0, 0.0518105, -0.996855, 0.0599689, 1.0, 0.113177, -0.979146, -0.168714, 1.0, -0.0902985, -0.946497, 0.309822, 1.0, 0.0143506, -0.937704, 0.347138, 1.0, 0.0264763, -0.999021, 0.035434, 1.0, 0.0829066, -0.975282, -0.20482, 1.0, 0.116133, -0.932812, 0.341138, 1.0, 0.564794, -0.712341, -0.416628, 1.0, 0.230317, -0.88991, -0.393718, 1.0, 0.380846, -0.787691, -0.484251, 1.0, 0.00168241, -0.999942, -0.0106394, 1.0, -0.217072, -0.944161, 0.24787, 1.0, -0.179322, -0.883294, 0.433168, 1.0, -0.0586786, -0.82956, 0.555326, 1.0, 0.0142909, -0.768914, 0.639193, 1.0, 0.118041, -0.738399, 0.663952, 1.0, 0.281061, -0.796279, 0.535672, 1.0, 0.229487, -0.9476, 0.222237, 1.0, 0.00532273, -0.999555, 0.0293503, 1.0, -0.0431766, -0.977099, -0.208357, 1.0, -0.0156146, -0.895886, -0.44401, 1.0, -0.220758, -0.949474, -0.223079, 1.0, 0.169025, -0.828436, -0.53397, 1.0, 0.170622, -0.595817, 0.784787, 1.0, 0.168004, -0.202379, 0.964789, 1.0, 0.0595059, -0.291728, 0.954649, 1.0, 0.0190219, -0.546261, 0.837399, 1.0, 0.131162, 0.438802, 0.88896, 1.0, 0.202595, 0.316111, 0.926838, 1.0, -0.0747253, -0.260131, 0.962678, 1.0, -0.0806673, -0.493838, 0.865804, 1.0, 0.232741, 0.258808, 0.93747, 1.0, 0.321796, -0.744914, 0.584423, 1.0, 0.373351, -0.552151, 0.745479, 1.0, 0.109952, -0.807812, 0.579095, 1.0, 0.183326, -0.0977958, 0.978176, 1.0, -0.0993465, 0.510896, 0.853883, 1.0, -0.475208, 0.662639, 0.578867, 1.0, -0.139757, 0.901345, 0.409933, 1.0, 0.146945, 0.925169, 0.349957, 1.0, 0.485449, 0.816802, 0.311727, 1.0, 0.690947, 0.636644, 0.342457, 1.0, 0.274945, 0.296944, 0.914456, 1.0, -0.122119, -0.157648, 0.979915, 1.0, -0.229203, -0.43173, 0.872396, 1.0, -0.192067, -0.652211, 0.733302, 1.0, -0.422105, -0.411279, 0.807884, 1.0, -0.0514342, -0.763439, 0.643828, 1.0, -0.392148, -0.0946333, 0.915021, 1.0, -0.135567, -0.0197343, 0.990572, 1.0, -0.121335, 0.0504262, 0.99133, 1.0, -0.371901, 0.0194373, 0.928069, 1.0, 0.342077, 0.285459, 0.895263, 1.0, 0.333594, 0.223644, 0.915805, 1.0, -0.0926453, 0.0915165, 0.991484, 1.0, -0.374692, 0.0692974, 0.924556, 1.0, 0.307018, 0.122389, 0.943801, 1.0, -0.528041, -0.299289, 0.794732, 1.0, -0.366982, -0.295115, 0.882174, 1.0, -0.664059, -0.0934626, 0.741816, 1.0, -0.15038, -0.124184, 0.980798, 1.0, 0.275464, 0.296224, 0.914533, 1.0, 0.761429, 0.532084, 0.370287, 1.0, 0.833818, 0.400482, 0.379949, 1.0, 0.863368, 0.217329, 0.455371, 1.0, 0.837796, 0.0270736, 0.545312, 1.0, 0.639903, -0.237084, 0.730969, 1.0, 0.289276, -0.104999, 0.95147, 1.0, -0.0404515, 0.0887126, 0.995235, 1.0, -0.395765, 0.179052, 0.900728, 1.0, -0.658075, 0.155182, 0.736788, 1.0, -0.515904, 0.383576, 0.765971, 1.0, -0.688945, 0.0137441, 0.724684, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.418982, 0.790509, 0.594618, 0.810764, 0.666667, 0.666667, 0.594618, 0.594618, 0.790509, 0.790509, 0.810764, 0.594618, 0.666667, 0.666667, 0.594618, 0.810764, 0.790509, 0.418981, 0.594618, 0.594618, 0.0, 1.0, 0.25, 1.0, 0.25, 0.75, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.75, 0.75, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, -1.19209e-07, 0.75, 0.25, 1.0, 0.25, 0.5, 0.5, 0.418982, 0.790509, 0.594618, 0.810764, 0.666667, 0.666667, 0.594618, 0.594618, 0.790509, 0.790509, 0.810764, 0.594618, 0.666667, 0.666667, 0.594618, 0.810764, 0.790509, 0.418981, 0.594618, 0.594618, 0.0, 1.0, 0.25, 1.0, 0.25, 0.75, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.75, 0.75, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, -1.19209e-07, 0.75, 0.25, 1.0, 0.25, 0.5, 0.5, 0.418982, 0.790509, 0.594618, 0.810764, 0.666667, 0.666667, 0.594618, 0.594618, 0.790509, 0.790509, 0.810764, 0.594618, 0.666667, 0.666667, 0.594618, 0.810764, 0.790509, 0.418981, 0.594618, 0.594618, 0.0, 1.0, 0.25, 1.0, 0.25, 0.75, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.75, 0.75, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, -1.19209e-07, 0.75, 0.25, 1.0, 0.25, 0.5, 0.5, 0.418982, 0.790509, 0.594618, 0.810764, 0.666667, 0.666667, 0.594618, 0.594618, 0.790509, 0.790509, 0.810764, 0.594618, 0.666667, 0.666667, 0.594618, 0.810764, 0.790509, 0.418981, 0.594618, 0.594618, 0.0, 1.0, 0.25, 1.0, 0.25, 0.75, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.75, 0.75, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, -1.19209e-07, 0.75, 0.25, 1.0, 0.25, 0.5, 0.5, 0.25, 0.75, 0.5, 0.75, 0.5, 0.5, 0.25, 0.5, 0.75, 0.75, 0.75, 0.5, 0.5, 0.25, 0.25, 0.25, 0.75, 0.25, 0.0, 1.0, 0.25, 1.0, 0.0, 0.75, 0.5, 1.0, 0.75, 1.0, 1.0, 1.0, 1.0, 0.75, 1.0, 0.5, 1.0, 0.25, 1.0, -1.19209e-07, 0.75, -1.19209e-07, 0.5, -1.19209e-07, 0.25, -1.19209e-07, 0.0, 0.25, 0.0, -1.19209e-07, 0.0, 0.5, 0.25, 0.75, 0.5, 0.75, 0.5, 0.5, 0.25, 0.5, 0.75, 0.75, 0.75, 0.5, 0.5, 0.25, 0.25, 0.25, 0.75, 0.25, 0.0, 1.0, 0.25, 1.0, 0.0, 0.75, 0.5, 1.0, 0.75, 1.0, 1.0, 1.0, 1.0, 0.75, 1.0, 0.5, 1.0, 0.25, 1.0, -1.19209e-07, 0.75, -1.19209e-07, 0.5, -1.19209e-07, 0.25, -1.19209e-07, 0.0, 0.25, 0.0, -1.19209e-07, 0.0, 0.5, 0.25, 0.75, 0.5, 0.75, 0.5, 0.5, 0.25, 0.5, 0.75, 0.75, 0.75, 0.5, 0.5, 0.25, 0.25, 0.25, 0.75, 0.25, 0.0, 1.0, 0.25, 1.0, 0.0, 0.75, 0.5, 1.0, 0.75, 1.0, 1.0, 1.0, 1.0, 0.75, 1.0, 0.5, 1.0, 0.25, 1.0, -1.19209e-07, 0.75, -1.19209e-07, 0.5, -1.19209e-07, 0.25, -1.19209e-07, 0.0, 0.25, 0.0, -1.19209e-07, 0.0, 0.5),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 0, 3, 2, 4, 6, 5, 4, 7, 6, 8, 6, 9, 8, 5, 6, 10, 0, 11, 10, 12, 0, 11, 1, 13, 11, 0, 1, 12, 3, 0, 12, 14, 3, 15, 4, 16, 15, 17, 4, 16, 5, 18, 16, 4, 5, 17, 7, 4, 17, 19, 7, 20, 8, 21, 20, 22, 8, 21, 9, 23, 21, 8, 9, 22, 5, 8, 22, 18, 5, 24, 26, 25, 24, 27, 26, 28, 30, 29, 28, 31, 30, 32, 30, 33, 32, 29, 30, 34, 24, 35, 34, 36, 24, 35, 25, 37, 35, 24, 25, 36, 27, 24, 36, 38, 27, 39, 28, 40, 39, 41, 28, 40, 29, 42, 40, 28, 29, 41, 31, 28, 41, 43, 31, 44, 32, 45, 44, 46, 32, 45, 33, 47, 45, 32, 33, 46, 29, 32, 46, 42, 29, 48, 50, 49, 48, 51, 50, 52, 54, 53, 52, 55, 54, 56, 54, 57, 56, 53, 54, 58, 48, 59, 58, 60, 48, 59, 49, 61, 59, 48, 49, 60, 51, 48, 60, 62, 51, 63, 52, 64, 63, 65, 52, 64, 53, 66, 64, 52, 53, 65, 55, 52, 65, 67, 55, 68, 56, 69, 68, 70, 56, 69, 57, 71, 69, 56, 57, 70, 53, 56, 70, 66, 53, 72, 74, 73, 72, 75, 74, 76, 78, 77, 76, 79, 78, 80, 78, 81, 80, 77, 78, 82, 72, 83, 82, 84, 72, 83, 73, 85, 83, 72, 73, 84, 75, 72, 84, 86, 75, 87, 76, 88, 87, 89, 76, 88, 77, 90, 88, 76, 77, 89, 79, 76, 89, 91, 79, 92, 80, 93, 92, 94, 80, 93, 81, 95, 93, 80, 81, 94, 77, 80, 94, 90, 77, 96, 98, 97, 96, 99, 98, 97, 101, 100, 97, 98, 101, 99, 102, 98, 99, 103, 102, 98, 104, 101, 98, 102, 104, 105, 96, 106, 105, 107, 96, 106, 97, 108, 106, 96, 97, 108, 100, 109, 108, 97, 100, 109, 111, 110, 109, 100, 111, 100, 112, 111, 100, 101, 112, 101, 113, 112, 101, 104, 113, 104, 114, 113, 104, 115, 114, 102, 115, 104, 102, 116, 115, 103, 116, 102, 103, 117, 116, 118, 117, 103, 118, 119, 117, 120, 103, 99, 120, 118, 103, 107, 99, 96, 107, 120, 99, 121, 123, 122, 121, 124, 123, 122, 126, 125, 122, 123, 126, 124, 127, 123, 124, 128, 127, 123, 129, 126, 123, 127, 129, 130, 121, 131, 130, 132, 121, 131, 122, 133, 131, 121, 122, 133, 125, 134, 133, 122, 125, 134, 136, 135, 134, 125, 136, 125, 137, 136, 125, 126, 137, 126, 138, 137, 126, 129, 138, 129, 139, 138, 129, 140, 139, 127, 140, 129, 127, 141, 140, 128, 141, 127, 128, 142, 141, 143, 142, 128, 143, 144, 142, 145, 128, 124, 145, 143, 128, 132, 124, 121, 132, 145, 124, 146, 148, 147, 146, 149, 148, 147, 151, 150, 147, 148, 151, 149, 152, 148, 149, 153, 152, 148, 154, 151, 148, 152, 154, 155, 146, 156, 155, 157, 146, 156, 147, 158, 156, 146, 147, 158, 150, 159, 158, 147, 150, 159, 161, 160, 159, 150, 161, 150, 162, 161, 150, 151, 162, 151, 163, 162, 151, 154, 163, 154, 164, 163, 154, 165, 164, 152, 165, 154, 152, 166, 165, 153, 166, 152, 153, 167, 166, 168, 167, 153, 168, 169, 167, 170, 153, 149, 170, 168, 153, 157, 149, 146, 157, 170, 149)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="rock001" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(-0.573576, 0.819152, 1.00356e-07, -0.627507, -0.439385, -0.642788, -0.526541, -0.368688, 0.766044, 0.0, 0.0, 0.0)
